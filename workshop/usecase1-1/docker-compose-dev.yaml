version: "3.9"
services:
  reverse-proxy:
    image: traefik:v2.9.5
    container_name: traefik
    command:
      - --log.level=DEBUG
      - --api.insecure=true
      - --api.dashboard=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entryPoints.web.address=:80
    ports:
      - 80:80
      - 443:443
      - 8080:8080
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
  database:
    container_name: database
    image: postgres:14
    restart: on-failure:3
    pull_policy: missing
    volumes:
      - ./data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - ${POSTGRES_EXPOSE_PORT}:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - usecase1-1
  web:
    depends_on:
      database:
        condition: service_healthy
    labels:
      - traefik.enable=true
      - traefik.http.routers.usecase1-3-web.rule=Host(`${FRONTEND_DOMAIN}`)
      - "traefik.http.routers.risk_management-api.entrypoints=websecure"
      - "traefik.http.routers.risk_management-api.tls=true"
  # api:
  #   depends_on:
  #     database:
  #       condition: service_healthy
  #   labels:
  #     - traefik.enable=true
  #     - traefik.http.routers.usecase1-3-api.rule=Host(`${BACKEND_DOMAIN}`)
  #     - "traefik.http.routers.risk_management-api.entrypoints=websecure"
  #     - "traefik.http.routers.risk_management-api.tls=true"
